{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","querySelector"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC9B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAGtCa,QAAQC,IAAIR,GAXS,kBAYdA,GAZc,4CAAH,sDCCPS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,yBAAKgB,UAAU,0CACd,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCFIS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACR1B,EAAQC,GACL0B,MAAK,SAAAb,GACJW,EAAS,CACPjB,KAAMM,EACNS,SAAS,SAGd,CAACtB,IAEGuB,EDb2BI,CAAa3B,GAAvCsB,EAF6B,EAE7BA,QAAeT,EAFc,EAEpBN,KAEjB,OACE,oCACE,4BAAKP,GACHsB,GACA,uBAAGJ,UAAU,qCAAb,gBAEF,yBAAKA,UAAU,aAEXL,EAAOJ,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eACEkB,IAAKlB,EAAIC,IACLD,UEgBHmB,EA/BM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,WAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KASzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEI6C,EAAWrB,KAAK,SAACT,GAAD,OACd,kBAAC,EAAD,CACE4B,IAAM5B,EACNA,SAAWA,U,MClBzB+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.fca83ace.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length>2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZZetT6F5ek0XoBAyW6Lq2EE1c5bFcieT`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map( (img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    }\r\n  })\r\n  console.log(gifs);\r\n  return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n     <img src={url} alt={title}/>\r\n     <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const { loading, data: images } = useFetchGifs(category);\r\n  \r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      { loading && (\r\n        <p className=\"animate__animated animate__fadeIn\">Cargando....</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map((img) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img} \r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(images =>{\r\n        setState({\r\n          data: images,\r\n          loading: false,\r\n        })\r\n      })\r\n  }, [category]);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Naruto']);\r\n\r\n  // const handleAdd = () => {\r\n  //   //setCategories([...categories,'Naruto'])\r\n  //   setCategories(cats => [...cats,'Naruto'])\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr/>\r\n      \r\n      <ol>\r\n        {\r\n          categories.map( (category) => \r\n            <GifGrid\r\n              key= {category}\r\n              category={ category }\r\n            />\r\n          )\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.querySelector('#root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}